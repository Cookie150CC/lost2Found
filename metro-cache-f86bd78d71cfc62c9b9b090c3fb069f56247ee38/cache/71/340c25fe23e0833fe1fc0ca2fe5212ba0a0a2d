__d(function (global, _require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });

  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../node_modules/react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _class,
      _temp2,
      _jsxFileName = "/home/cookie/Documents/MHacks/lost2Found/screens/Found.js";

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _expo = _require(_dependencyMap[3], "expo");

  var _StyledText = _require(_dependencyMap[4], "../components/StyledText");

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    Found: {
      displayName: "Found"
    }
  };

  var _node_modulesReactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/home/cookie/Documents/MHacks/lost2Found/screens/Found.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _node_modulesReactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var Found = _wrapComponent("Found")((_temp2 = _class = function (_React$Component) {
    _inherits(Found, _React$Component);

    function Found() {
      var _ref;

      var _temp, _this, _ret;

      _classCallCheck(this, Found);

      for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments[_key];
      }

      return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Found.__proto__ || Object.getPrototypeOf(Found)).call.apply(_ref, [this].concat(args))), _this), _this.state = {
        hasCameraPermission: null,
        type: _expo.Camera.Constants.Type.back
      }, _temp), _possibleConstructorReturn(_this, _ret);
    }

    _createClass(Found, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        var _ref2, status;

        return regeneratorRuntime.async(function componentWillMount$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return regeneratorRuntime.awrap(_expo.Permissions.askAsync(_expo.Permissions.CAMERA));

              case 2:
                _ref2 = _context.sent;
                status = _ref2.status;
                this.setState({
                  hasCameraPermission: status === 'granted'
                });

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "render",
      value: function render() {
        var _this2 = this;

        var hasCameraPermission = this.state.hasCameraPermission;

        if (hasCameraPermission === null) {
          return _react3.default.createElement(_reactNative.View, {
            __source: {
              fileName: _jsxFileName,
              lineNumber: 39
            }
          });
        } else if (hasCameraPermission === false) {
          return _react3.default.createElement(
            _reactNative.Text,
            {
              __source: {
                fileName: _jsxFileName,
                lineNumber: 41
              }
            },
            "No access to camera"
          );
        } else {
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: {
                flex: 1
              },
              __source: {
                fileName: _jsxFileName,
                lineNumber: 44
              }
            },
            _react3.default.createElement(
              _expo.Camera,
              {
                style: {
                  flex: 1
                },
                type: this.state.type,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 45
                }
              },
              _react3.default.createElement(
                _reactNative.View,
                {
                  style: {
                    flex: 1,
                    backgroundColor: 'transparent',
                    flexDirection: 'row'
                  },
                  __source: {
                    fileName: _jsxFileName,
                    lineNumber: 46
                  }
                },
                _react3.default.createElement(
                  _reactNative.TouchableOpacity,
                  {
                    style: {
                      flex: 0.1,
                      alignSelf: 'flex-end',
                      alignItems: 'center'
                    },
                    onPress: function onPress() {
                      _this2.setState({
                        type: _this2.state.type === _expo.Camera.Constants.Type.back
                      });
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 52
                    }
                  },
                  _react3.default.createElement(_reactNative.Text, {
                    style: {
                      fontSize: 18,
                      marginBottom: 10,
                      color: 'white'
                    },
                    __source: {
                      fileName: _jsxFileName,
                      lineNumber: 65
                    }
                  })
                )
              )
            )
          );
        }
      }
    }]);

    return Found;
  }(_react3.default.Component), _class.navigationOptions = {
    title: 'Found'
  }, _temp2));

  exports.default = Found;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1,
      backgroundColor: '#fff'
    },
    developmentModeText: {
      marginBottom: 20,
      color: 'rgba(0,0,0,0.4)',
      fontSize: 14,
      lineHeight: 19,
      textAlign: 'center'
    },
    contentContainer: {
      paddingTop: 30
    },
    welcomeContainer: {
      alignItems: 'center',
      marginTop: 10,
      marginBottom: 20
    },
    welcomeImage: {
      width: 100,
      height: 80,
      resizeMode: 'contain',
      marginTop: 3,
      marginLeft: -10
    },
    getStartedContainer: {
      alignItems: 'center',
      marginHorizontal: 50
    },
    homeScreenFilename: {
      marginVertical: 7
    },
    codeHighlightText: {
      color: 'rgba(96,100,109, 0.8)'
    },
    codeHighlightContainer: {
      backgroundColor: 'rgba(0,0,0,0.05)',
      borderRadius: 3,
      paddingHorizontal: 4
    },
    getStartedText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      lineHeight: 24,
      textAlign: 'center'
    },
    tabBarInfoContainer: _extends({
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0
    }, _reactNative.Platform.select({
      ios: {
        shadowColor: 'black',
        shadowOffset: {
          height: -3
        },
        shadowOpacity: 0.1,
        shadowRadius: 3
      },
      android: {
        elevation: 20
      }
    }), {
      alignItems: 'center',
      backgroundColor: '#fbfbfb',
      paddingVertical: 20
    }),
    tabBarInfoText: {
      fontSize: 17,
      color: 'rgba(96,100,109, 1)',
      textAlign: 'center'
    },
    navigationFilename: {
      marginTop: 5
    },
    helpContainer: {
      marginTop: 15,
      alignItems: 'center'
    },
    helpLink: {
      paddingVertical: 15
    },
    helpLinkText: {
      fontSize: 14,
      color: '#2e78b7'
    }
  });
});